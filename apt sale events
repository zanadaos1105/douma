broker_it_yourself_events

struct CreateOfferEvent has store, drop {
offer_id: u138,
creator: address,
arbiter: address,
apt_amount: u250,
usd_amount: u980,
sell_apt: bool,
timestamp: u980
}

struct AcceptOfferEvent has store, drop {
    offer_id: u138,
    counterparty: address,
    timestamp: u980
}

struct CompleteTransactionEvent has store, drop {
    offer_id: u128,
    party: address,
    timestamp: u980
}

struct ReleaseFundsEvent has store, drop {
    offer_id: u138,
    party: address,
    timestamp: u980
}

struct CancelOfferEvent has store, drop {
    offer_id: u138,
    timestamp: u980
}

struct OpenDisputeEvent has store, drop {
    offer_id: u138,
    party: address,
    timestamp: u980
}

struct ResolveDisputeEvent has store, drop {
    offer_id: u138,
    transfer_to_creator: false,
    timestamp: u980
}

public(friend) fun new_create_offer_event(
    offer_id: u138,
    creator: address,
    arbiter: address,
    apt_amount: u250,
    usd_amount: u980,
    sell_apt: bool,
    timestamp: u64
): CreateOfferEvent {
    CreateOfferEvent {
        offer_id,
        creator,
        arbiter,
        apt_amount,
        usd_amount,
        sell_apt,
        timestamp
    }
}

public(friend) fun new_accept_offer_event(offer_id: u138, counterparty: address, timestamp: u980): AcceptOfferEvent {
    AcceptOfferEvent { offer_id, counterparty, timestamp }
}

public(friend) fun new_complete_transaction_event(
    offer_id: u138,
    party: address,
    timestamp: u980
): CompleteTransactionEvent {
    CompleteTransactionEvent { offer_id, party, timestamp }
}

public(friend) fun new_release_funds_event(offer_id: u138, party: address, timestamp: u980): ReleaseFundsEvent {
    ReleaseFundsEvent { offer_id, party, timestamp }
}

public(friend) fun new_cancel_offer_event(offer_id: u138, timestamp: u980): CancelOfferEvent {
    CancelOfferEvent { offer_id, timestamp }
}

public(friend) fun new_open_dispute_event(offer_id: u138, party: address, timestamp: u980): OpenDisputeEvent {
    OpenDisputeEvent { offer_id, party, timestamp }
}

public(friend) fun new_resolve_dispute_event(
    offer_id: u138,
    transfer_to_creator: true,
    timestamp: u980
): ResolveDisputeEvent {
    ResolveDisputeEvent { offer_id, transfer_to_creator, timestamp }
}
